/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import com.sun.awt.AWTUtilities;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.geom.RoundRectangle2D;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 *
 * @author RuDhLK
 */
public class Slider extends javax.swing.JFrame {

   public static boolean shown = false;
   public static Slider slider = new Slider();

   public enum POSITION {

      TOP_LEFT, TOP_RIGHT, BOTTOM_LEFT, BOTTOM_RIGHT
   }

   /**
    * Creates new form Slider
    */
   private Slider() {
      initComponents();
      //showSlider("Testing text", POSITION.BOTTOM_RIGHT);
      AWTUtilities.setWindowShape(this, new RoundRectangle2D.Double(getX(), getY(), getWidth(), getHeight(), 5, 5));

   }

   public static Slider getInstance() {
      return slider;
   }

   /**
    * This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jPanel1 = new CustomBackgroundJPanel();
      jLabel1 = new javax.swing.JLabel();
      jButton1 = new javax.swing.JButton();

      setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      setUndecorated(true);

      jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
      jLabel1.setForeground(new java.awt.Color(255, 255, 255));
      jLabel1.setText("Testing text");

      jButton1.setText("jButton1");
      jButton1.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel1)
            .addContainerGap(128, Short.MAX_VALUE))
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton1)
            .addContainerGap())
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton1)
            .addContainerGap())
      );

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

   private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      showSlider("New testing text", POSITION.TOP_RIGHT);
   }//GEN-LAST:event_jButton1ActionPerformed

   public Thread hideSlider() {
      Thread thread = new Thread(new Runnable() {
         @Override
         public void run() {
            while (AWTUtilities.getWindowOpacity(Slider.this) > 0.05) {
               AWTUtilities.setWindowOpacity(Slider.this, AWTUtilities.getWindowOpacity(Slider.this) - 0.05f);
               try {
                  Thread.sleep(20);
               } catch (InterruptedException ex) {
                  Logger.getLogger(Slider.class.getName()).log(Level.SEVERE, null, ex);
               }
            }
            Slider.this.dispose();
         }
      });
      thread.start();
      shown=false;
      return thread;

   }

   public void showSlider(String text, final POSITION position) {
      if (shown) {
         try {
            hideSlider().join();
         } catch (InterruptedException ex) {
            Logger.getLogger(Slider.class.getName()).log(Level.SEVERE, null, ex);
         }
      }
      jLabel1.setText(text);
      shown = true;
      setVisible(true);

      new Thread(new Runnable() {
         int top = 5;
         int gap = 5;
         int sleep = 20;
         int tempX;
         int tempY;
         int x;
         int y;
         int width = getWidth();
         int height = getHeight();
         Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
         Insets insets = Toolkit.getDefaultToolkit().getScreenInsets(getGraphicsConfiguration());

         @Override
         public void run() {
            switch (position) {
               case TOP_LEFT:
                  x = 0 + insets.left;
                  y = 0 + insets.top + top;
                  tempX = 0 - width;
                  tempY = y;
                  setLocation(tempX, tempY);
                  while (tempX < x - gap) {
                     tempX += gap;
                     try {
                        Thread.sleep(sleep);
                     } catch (InterruptedException ex) {
                        Logger.getLogger(Slider.class.getName()).log(Level.SEVERE, null, ex);
                     }
                     setLocation(tempX, tempY);
                  }
                  break;
               case TOP_RIGHT:
                  x = (int) (dimension.getWidth() - width - insets.right);
                  y = 0 + insets.top + top;
                  tempX = (int) dimension.getWidth();
                  tempY = y;
                  setLocation(tempX, tempY);
                  while (tempX > x + gap) {
                     tempX -= gap;
                     try {
                        Thread.sleep(sleep);
                     } catch (InterruptedException ex) {
                        Logger.getLogger(Slider.class.getName()).log(Level.SEVERE, null, ex);
                     }
                     setLocation(tempX, tempY);
                  }
                  break;
               case BOTTOM_LEFT:
                  x = 0 + insets.left;
                  y = (int) (dimension.getHeight() - height - insets.bottom);
                  tempX = 0 - width;
                  tempY = y;
                  setLocation(tempX, tempY);
                  while (tempX < x - gap) {
                     tempX += gap;
                     try {
                        Thread.sleep(sleep);
                     } catch (InterruptedException ex) {
                        Logger.getLogger(Slider.class.getName()).log(Level.SEVERE, null, ex);
                     }
                     setLocation(tempX, tempY);
                  }
                  break;
               case BOTTOM_RIGHT:
                  x = (int) (dimension.getWidth() - width - insets.right);
                  y = (int) (dimension.getHeight() - height - insets.bottom);
                  tempX = (int) dimension.getWidth();
                  tempY = y;
                  setLocation(tempX, tempY);
                  while (tempX > x + gap) {
                     tempX -= gap;
                     try {
                        Thread.sleep(sleep);
                     } catch (InterruptedException ex) {
                        Logger.getLogger(Slider.class.getName()).log(Level.SEVERE, null, ex);
                     }
                     setLocation(tempX, tempY);
                  }
                  break;
            }

         }
      }).start();
   }

   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {

      /* Create and display the dialog */
      java.awt.EventQueue.invokeLater(new Runnable() {
         public void run() {
            Slider slider=Slider.getInstance();
            slider.showSlider("Testing text", POSITION.TOP_LEFT);
         }
      });
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton jButton1;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JPanel jPanel1;
   // End of variables declaration//GEN-END:variables
}
